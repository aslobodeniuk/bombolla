public class ValaTest : GLib.Object {

    /* Signals */
    public virtual signal void say_hello() {
       stdout.printf("Hello! Vala is probably the best solution for Bombolla!\n");
    }

    /* Properties */
    protected string _str_rw;
    public virtual string str_rw {
        get {
	    return this._str_rw;
        }

        set {
            stdout.printf("Vala plugin [%p]: Setting str_rw to %s\n", this, value);
	    this._str_rw = value;
        }
    }

    protected string _str_r;
    public virtual string str_r {
        get {
	    return this._str_r;
        }
    }

    protected string _str_w;
    public virtual string str_w {
        set {
            stdout.printf("Vala plugin [%p]: Setting str_w to %s\n", this, value);
	    this._str_w = value;
        }
    }

    protected float _float_rw;
    public virtual float float_rw {
        get {
	    return this._float_rw;
        }

        set {
            stdout.printf("Vala plugin [%p]: Setting float_rw to %f\n", this, value);
	    this._float_rw = value;
        }
    }
}

/* FIXME: To export this class as bombolla plugin, we need
 * to define a simple function:
 *
 * GType bombolla_plugin_system_get_gtype (void) {
 *   return vala_test_get_type ();
 * }
 *
 * C code generated by valac has vala_test_get_type () function and
 * TYPE_VALA_TEST macro, but we don't know how to use them from vala code.
 * It could be something like
 *
 * public GLib.Type bombolla_plugin_system_get_gtype () {
 *   return vala_test_get_type ();
 * }
 *
 * .. but valac doesn't accept it..
 * So, for now what we do is to compile it together with a small C file
 * register_plugin.c
 */

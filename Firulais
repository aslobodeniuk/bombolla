#!/bin/bash

message()
{
    COL='\033[1;33m'
    NC='\033[0m'

    echo -e "${COL}FIRULAIS:${NC} $@"
}

angry_message()
{
    RED='\033[0;31m'
    NC='\033[0m'

    echo -e "\n${RED}$1${NC}"
    shift
    echo -e "$@"
}

INDENT_PARAMETERS="--line-length85 \
	--indent-level2 \
	--no-tabs \
	--tab-size8 \
        --struct-brace-indentation2 \
	--case-brace-indentation2 \
	--case-indentation0 \
        --indent-label0 \
	--continuation-indentation4 \
        --declaration-indentation2\
	--braces-on-if-line \
	--braces-on-struct-decl-line \
        --braces-on-func-def-line \
        --brace-indent2 \
        --no-space-after-casts \
        --cuddle-do-while \
	--cuddle-else \
        --blank-lines-after-declarations \
	--blank-lines-after-procedures \
        --blank-lines-after-commas \
        --break-before-boolean-operator \
        --spaces-around-initializers \
        --continue-at-parentheses \
        --paren-indentation2 \
        --preprocessor-indentation2 \
        --swallow-optional-blank-lines \
        --parameter-indentation2 \
	--honour-newlines"

test_example()
{
    LOGF="build/firulais-test-log.txt"
    
    message "Testing '$1' example"; shift
    echo 'q' | G_DEBUG=fatal-warnings G_MESSAGES_DEBUG=all $@ 1>>${LOGF} 2>&1 || (angry_message "Test failed" "check $LOGF"; exit 1 )
}

build_and_test()
{
    GREEN='\033[1;32m'
    NC='\033[0m'

    message "Building"
    meson setup build || exit 1
    ninja -C build  || exit 1

    message "Running tests"
    ninja -C build test  || exit 1

    test_example "plugin in vala" "build/bombolla/tools/shell/bombolla-shell -i examples/plugin-in-vala" || exit 1
    test_example "plugin in python" "build/bombolla/tools/shell/bombolla-shell -i examples/plugin-in-python" || exit 1

    if test "x$1" != "x--ci-mode"; then
	test_example "cogl" "build/bombolla/tools/shell/bombolla-shell -p build -i examples/cogl" || exit 1

	test_example "using from python" "python3 examples/python/use-from-python.py" || exit 1
	test_example "plugin in js" "build/bombolla/tools/shell/bombolla-shell -i examples/plugin-in-js" || exit 1

	LBA_PYTHON_PLUGINS_PATH=$(pwd)/examples/frankenstein-news LBA_JS_PLUGINS_PATH=$(pwd)/examples/frankenstein-news test_example "Testing FRANKENSTEIN" "build/bombolla/tools/shell/bombolla-shell -p build/bombolla/ -i examples/frankenstein-news/frank.lba" || exit 1
    fi

    message "${GREEN}All tests passed! :)${NC} Enjoy."
}

check_format()
{
    # parameter is a file to check
    nf=$1

    newfile=`mktemp /tmp/bombolla-Firulais-check.XXXXXX`
    indent ${INDENT_PARAMETERS} $nf -o $newfile 2>> /dev/null  || exit 1
    diff -u -p "${nf}" "${newfile}"
    r=$?
    rm "${newfile}"
    rm "${nf}"
    if [ $r != 0 ] ; then
	echo "================================================================================================="
	angry_message "Code style error" "in: $file"
	echo "                                                                                                 "
	echo " Please fix before committing. Don't forget to run git add before trying to commit again.        "
	echo " If the whole file is to be committed, this should work (run from the top-level directory):      "
	echo "                                                                                                 "
	echo "   ./Firulais $file; git add $file; git commit"
	echo "                                                                                                 "
	echo "================================================================================================="
        exit 1
    fi
}

if test "x$1" = "x--ci-mode"; then
    message "CI mode"
    message "Checking all the files"
    for file in `find * . 2>&1 | grep \\\.[ch]\$ | grep -v plugins/cogl/cogl | grep -v "^\\\./build/" | grep -v "^build/"` ; do
	# nf is the temporary checkout. This makes sure we check against the
	# revision in the index (and not the checked out version).
	nf=`mktemp /tmp/bombolla-Firulais-check2.XXXXXX`
	cp ${file} $nf
	check_format $nf
    done

    build_and_test "--ci-mode"
    message "Firulais allows this traveller to pass"
    exit 0
fi

if test "x$1" = "x"; then
    message "Commit-hook mode"
    message "Checking style"
    for file in `git diff-index --cached --name-only HEAD --diff-filter=ACMR| grep "\.[ch]$"` ; do
	# nf is the temporary checkout. This makes sure we check against the
	# revision in the index (and not the checked out version).
	nf=`git checkout-index --temp ${file} | cut -f 1`
	check_format $nf
    done
    message "Checking style pass"
    build_and_test
else
    if test "x$1" = "xenv"; then
	message "entering the env wrapper"
	meson devenv -C build
	exit 0
    fi

    indent ${INDENT_PARAMETERS} $@
fi

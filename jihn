#!/bin/sh
#
# Check that the code follows a consistant code style
# This script was shamelessly copied from GStreamer project as well as many other things
# File is called "jihn" in a name of the coding style that was developed one thousand
# years ago.

# Check for existence of indent, and error out if not present.
# On some *bsd systems the binary seems to be called gnunindent,
# so check for that first.

version=`gnuindent --version 2>/dev/null`
if test "x$version" = "x"; then
  version=`indent --version 2>/dev/null`
  if test "x$version" = "x"; then
    echo "Bombolla git pre-commit hook:"
    echo "Did not find GNU indent, please install it before continuing."
    exit 1
  fi
  INDENT=indent
else
  INDENT=gnuindent
fi

case `$INDENT --version` in
  GNU*)
      ;;
  default)
      echo "Bombolla git pre-commit hook:"
      echo "Did not find GNU indent, please install it before continuing."
      echo "(Found $INDENT, but it doesn't seem to be GNU indent)"
      exit 1
      ;;
esac

INDENT_PARAMETERS="--line-length85 \
	--indent-level2 \
	--no-tabs \
	--tab-size8 \
        --struct-brace-indentation2 \
	--case-brace-indentation2 \
	--case-indentation0 \
        --indent-label0 \
	--continuation-indentation4 \
        --declaration-indentation2\
	--braces-on-if-line \
	--braces-on-struct-decl-line \
        --braces-on-func-def-line \
        --brace-indent2 \
        --no-space-after-casts \
        --cuddle-do-while \
	--cuddle-else \
        --blank-lines-after-declarations \
	--blank-lines-after-procedures \
        --blank-lines-after-commas \
        --break-before-boolean-operator \
        --spaces-around-initializers \
        --continue-at-parentheses \
        --paren-indentation2 \
        --preprocessor-indentation2 \
        --swallow-optional-blank-lines \
        --parameter-indentation2 \
	--honour-newlines"

check_format()
{
    # parameter is a file to check
    nf=$1

    newfile=`mktemp /tmp/bombolla-jihn-check.XXXXXX` || exit 1
    $INDENT ${INDENT_PARAMETERS} \
	    $nf -o $newfile 2>> /dev/null
    diff -u -p "${nf}" "${newfile}"
    r=$?
    rm "${newfile}"
    rm "${nf}"
    if [ $r != 0 ] ; then
	echo "================================================================================================="
	echo " Code style error in: $file                                                                      "
	echo "                                                                                                 "
	echo " Please fix before committing. Don't forget to run git add before trying to commit again.        "
	echo " If the whole file is to be committed, this should work (run from the top-level directory):      "
	echo "                                                                                                 "
	echo "   ./jihn $file; git add $file; git commit"
	echo "                                                                                                 "
	echo "================================================================================================="
        exit 1
    fi
}

if test "x$1" = "x--go-ahead"; then
    echo "--Checking style in bombolla--"
    for file in `cd bombolla && find * . 2>&1 | grep \.[ch]\$ && cd ..` ; do
	# nf is the temporary checkout. This makes sure we check against the
	# revision in the index (and not the checked out version).
	nf=`mktemp /tmp/bombolla-jihn-check2.XXXXXX`
	cp bombolla/${file} $nf || exit 1
	check_format $nf
    done

    echo "--Checking style in tests--"
    for file in `cd tests && find * . 2>&1 | grep \.[ch]\$ && cd ..` ; do
	# nf is the temporary checkout. This makes sure we check against the
	# revision in the index (and not the checked out version).
	nf=`mktemp /tmp/bombolla-jihn-check2.XXXXXX`
	cp tests/${file} $nf || exit 1
	check_format $nf
    done

    echo "--Running tests--"

    # We don't do make check in root folder because it launches cogl's unit tests
    # It's not that bad to launch them, but for now we save resources of the planet earth
    cd tests && make check && cd ..

    echo "-- Jihn allows this travaller to pass --"
    exit 0
fi

if test "x$1" = "x"; then
    echo "--Commit-hook mode..--"
    echo "--Checking style--"
    for file in `git diff-index --cached --name-only HEAD --diff-filter=ACMR| grep "\.[ch]$"` ; do
	# nf is the temporary checkout. This makes sure we check against the
	# revision in the index (and not the checked out version).
	nf=`git checkout-index --temp ${file} | cut -f 1`
	check_format $nf
    done
    echo "--Checking style pass--"
else
    $INDENT ${INDENT_PARAMETERS} $@
fi
